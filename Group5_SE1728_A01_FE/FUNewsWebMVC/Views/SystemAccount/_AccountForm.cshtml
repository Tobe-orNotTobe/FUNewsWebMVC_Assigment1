@model FUNewsWebMVC.Models.SystemAccount

@Html.AntiForgeryToken()

<form id="accountForm" asp-action="@ViewBag.Action" method="post">
    @if (Model.AccountId != 0)
    {
        <input type="hidden" asp-for="AccountId" />
    }

    <div class="form-group mb-3">
        <label asp-for="AccountName" class="form-label">Account Name *</label>
        <input asp-for="AccountName" class="form-control" maxlength="100" required
               placeholder="Enter full name..." />
        <span asp-validation-for="AccountName" class="text-danger"></span>
        <div class="form-text">Full name of the account holder (max 100 characters)</div>
    </div>

    <div class="form-group mb-3">
        <label asp-for="AccountEmail" class="form-label">Email Address *</label>
        <input asp-for="AccountEmail" class="form-control" type="email" maxlength="70" required
               placeholder="Enter email address..." />
        <span asp-validation-for="AccountEmail" class="text-danger"></span>
        <div class="form-text">Valid email address for login (max 70 characters)</div>
    </div>

    <div class="form-group mb-3">
        <label asp-for="AccountPassword" class="form-label">Password *</label>
        <div class="input-group">
            <input asp-for="AccountPassword" class="form-control" type="password" maxlength="70" required
                   placeholder="Enter password..." minlength="6" />
            <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                <i class="fas fa-eye" id="passwordIcon"></i>
            </button>
        </div>
        <span asp-validation-for="AccountPassword" class="text-danger"></span>
        <div class="form-text">Secure password (minimum 6 characters, max 70 characters)</div>
    </div>

    <div class="form-group mb-3">
        <label asp-for="AccountRole" class="form-label">Role *</label>
        <select asp-for="AccountRole" class="form-select" required>
            <option value="">-- Select Role --</option>
            <option value="1">Staff</option>
            <option value="2">Lecturer</option>
        </select>
        <span asp-validation-for="AccountRole" class="text-danger"></span>
        <div class="form-text">
            <div class="small text-muted">
                <strong>Staff:</strong> Can manage categories, news articles, and tags<br>
                <strong>Lecturer:</strong> Can view and create news articles only
            </div>
        </div>
    </div>

    @if (Model.AccountId != 0)
    {
        <!-- Account Metadata for Edit -->
        <div class="row mt-4 pt-3 border-top bg-light rounded p-3">
            <div class="col-md-6">
                <div class="mb-2">
                    <strong>Account ID:</strong>
                    <code>@Model.AccountId</code>
                </div>
                <div class="mb-2">
                    <strong>Current Role:</strong>
                                @{
                        switch (Model.AccountRole)
                        {
                            case 1:
                                <span class="badge bg-warning text-dark">Staff</span>
                                break;
                            case 2:
                                <span class="badge bg-info">Lecturer</span>
                                break;
                            default:
                                <span class="badge bg-secondary">Unknown</span>
                                break;
                        }
                    }
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-2">
                    <strong>Email Status:</strong>
                    <span class="badge bg-success">Active</span>
                </div>
                <div class="mb-2">
                    <strong>Account Status:</strong>
                    <span class="badge bg-success">Active</span>
                </div>
            </div>
        </div>
    }
</form>

<script>
    // Scoped to modal only - prevent affecting table
    $(document).ready(function() {
        // Password toggle functionality
        $('#togglePassword').click(function() {
            const passwordField = $('#AccountPassword');
            const passwordIcon = $('#passwordIcon');
            
            if (passwordField.attr('type') === 'password') {
                passwordField.attr('type', 'text');
                passwordIcon.removeClass('fa-eye').addClass('fa-eye-slash');
            } else {
                passwordField.attr('type', 'password');
                passwordIcon.removeClass('fa-eye-slash').addClass('fa-eye');
            }
        });

        // Character counter for content fields (scoped to modal)
        function addCharacterCounter(selector, maxLength) {
            const element = $('#accountModal').find(selector);
            if (element.length > 0) {
                const counter = $('<div class="text-muted small mt-1"></div>');
                element.parent().append(counter);

                function updateCounter() {
                    const remaining = maxLength - element.val().length;
                    counter.text(`${remaining} characters remaining`);
                    counter.removeClass('text-warning text-danger').addClass('text-muted');

                    if (remaining < 20) {
                        counter.removeClass('text-muted').addClass('text-warning');
                    }
                    if (remaining < 10) {
                        counter.removeClass('text-warning').addClass('text-danger');
                    }
                }

                element.on('input', updateCounter);
                updateCounter();
            }
        }

        // Add counters to text fields (only in modal)
        addCharacterCounter('#AccountName', 100);
        addCharacterCounter('#AccountEmail', 70);
        addCharacterCounter('#AccountPassword', 70);

        // Email validation
        $('#AccountEmail').on('blur', function() {
            const email = $(this).val();
            const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            
            if (email && !emailRegex.test(email)) {
                $(this).addClass('is-invalid');
                $(this).next('.text-danger').text('Please enter a valid email address.');
            } else {
                $(this).removeClass('is-invalid');
            }
        });

        // Password strength indicator
        $('#AccountPassword').on('input', function() {
            const password = $(this).val();
            const strengthText = $(this).parent().next().next('.form-text');
            
            if (password.length === 0) {
                strengthText.html('Secure password (minimum 6 characters, max 70 characters)');
                strengthText.removeClass('text-danger text-warning text-success').addClass('text-muted');
            } else if (password.length < 6) {
                strengthText.html('Password too short (minimum 6 characters required)');
                strengthText.removeClass('text-muted text-warning text-success').addClass('text-danger');
            } else if (password.length < 8) {
                strengthText.html('Weak password - consider making it longer');
                strengthText.removeClass('text-muted text-danger text-success').addClass('text-warning');
            } else {
                strengthText.html('Good password strength');
                strengthText.removeClass('text-muted text-danger text-warning').addClass('text-success');
            }
        });

        // Form validation (scoped to modal)
        $('#accountModal').on('submit', '#accountForm', function(e) {
            let isValid = true;
            const modalContext = $('#accountModal');

            // Validate Account Name
            const accountNameField = modalContext.find('#AccountName');
            if (!accountNameField.val().trim()) {
                isValid = false;
                accountNameField.addClass('is-invalid');
            } else {
                accountNameField.removeClass('is-invalid');
            }

            // Validate Email
            const emailField = modalContext.find('#AccountEmail');
            const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            if (!emailField.val().trim() || !emailRegex.test(emailField.val())) {
                isValid = false;
                emailField.addClass('is-invalid');
            } else {
                emailField.removeClass('is-invalid');
            }

            // Validate Password
            const passwordField = modalContext.find('#AccountPassword');
            if (!passwordField.val() || passwordField.val().length < 6) {
                isValid = false;
                passwordField.addClass('is-invalid');
            } else {
                passwordField.removeClass('is-invalid');
            }

            // Validate Role
            const roleField = modalContext.find('#AccountRole');
            if (!roleField.val()) {
                isValid = false;
                roleField.addClass('is-invalid');
            } else {
                roleField.removeClass('is-invalid');
            }

            if (!isValid) {
                e.preventDefault();
                showAlert('warning', 'Please fill in all required fields correctly.');
                return false;
            }
        });
    });
</script>